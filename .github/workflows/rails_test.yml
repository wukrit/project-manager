name: Rails Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: project_manager_test
          POSTGRES_USER: project_manager
          POSTGRES_PASSWORD: password
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Get Yarn Cache
      id: yarn-cache
      run: echo "::set-output name=dir::$(yarn cache dir)"


    - name: Get Node Modules Cache
      id: node-modules-cache
      uses: actions/cache@v1
      with:
        path: ${{ steps.yarn-cache.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Get Assets Cache
      id: assets-cache
      uses: actions/cache@v1
      with:
        path: public/packs-test
        key: ${{ runner.os }}-assets-${{ steps.extract_branch.outputs.branch }}
        restore-keys: |
          ${{ runner.os }}-assets-

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0.0'
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically

    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: 15.12.0

    - name: Install dependencies
      run: |
        sudo apt-get -yqq install libpq-dev build-essential libcurl4-openssl-dev
        gem install bundler
        bundle install --jobs 4 --retry 3
        yarn install

    - name: Setup test database
      env:
        RAILS_ENV: test
        PGHOST: localhost
        POSTGRES_DB: project_manager_test
        POSTGRES_USER: project_manager
        POSTGRES_PASSWORD: password
      run: |
        cp config/database.ci.yml config/database.yml
        bundle exec rake db:create db:migrate

    - name: Run tests
      env:
        PGHOST: localhost
        POSTGRES_DB: project_manager_test
        POSTGRES_USER: project_manager
        POSTGRES_PASSWORD: password
        PGPORT: ${{ job.services.postgres.ports[5432] }}
        RAILS_ENV: test
      run: bundle exec rake

    - name: Upload Test Coverage
    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./.resultset.json
        directory: ./coverage
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true
